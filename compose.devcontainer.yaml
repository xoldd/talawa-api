# https://docs.docker.com/reference/compose-file/networks/
services:
  api:
    # https://docs.docker.com/reference/compose-file/build/
    build:
      args:
        - API_DEBUGGER_HOST=${API_DEBUGGER_HOST:?error}
        - API_DEBUGGER_PORT=${API_DEBUGGER_PORT:?error}
      # https://docs.docker.com/reference/compose-file/build/#target
      target: devcontainer
    depends_on:
      minio:
        condition: service_healthy
        required: true
      postgres:
        condition: service_healthy
        required: true
      redis:
        condition: service_healthy
        required: true
    # https://docs.docker.com/compose/environment-variables/
    # https://docs.docker.com/reference/compose-file/services/#environment
    environment:
      - API_DEBUGGER_HOST=${API_DEBUGGER_HOST:?error}
      - API_DEBUGGER_PORT=${API_DEBUGGER_PORT:?error}
    healthcheck:
      disable: true
    # https://docs.docker.com/reference/compose-file/services/#ports
    ports:
      - host_ip: ${API_MAPPED_HOST_IP:?error}
        name: api
        published: ${API_MAPPED_PORT:?error}
        target: ${API_PORT}
      - host_ip: ${API_DEBUGGER_MAPPED_HOST_IP:?error}
        name: api_debugger
        published: ${API_DEBUGGER_MAPPED_PORT:?error}
        target: ${API_DEBUGGER_PORT}
    volumes:
      # # - target: /home/talawa/.local/share/pnpm/store
      # - target: /home/vscode/.local/share/pnpm/store
      #   type: volume
      # # - target: /home/talawa/api/node_modules
      # - target: /home/vscode/api/node_modules
      #   type: volume
      # - source: ./
      #   # target: /home/talawa/api
      #   target: /home/vscode/api
      #   type: bind
        # The talawa api workspace volume is managed by docker. This lets us use the devcontainer without mounting the talawa api workspace from the host system. 
      - source: talawa_api_workspace
        target: /home/vscode/api
        # target: /home/talawa/api
        type: volume
  caddy:
    depends_on:
      api:
        condition: service_healthy
        # We disable the dependence of the caddy service on the api service when using devcontainer because within the devcontainer the api is not guaranteed to be running. This way the caddy service can start independently but still be able to proxy the incoming HTTP requests to the api service whenever it is online within the devcontainer.
        required: false
  cloudbeaver:
    # https://docs.docker.com/reference/compose-file/services/#depends_on
    depends_on:
      postgres:
        condition: service_healthy
        # Should be set to false when a third party postgres service could be used in the api service and the postgres compose profile is disabled.
        required: false
    # https://docs.docker.com/compose/environment-variables/
    # https://docs.docker.com/reference/compose-file/services/#environment
    environment:
      - CB_ADMIN_NAME=${CLOUDBEAVER_ADMIN_NAME:?error}
      - CB_ADMIN_PASSWORD=${CLOUDBEAVER_ADMIN_PASSWORD:?error}
      - CB_SERVER_NAME=${CLOUDBEAVER_SERVER_NAME:?error}
      - CB_SERVER_URL=${CLOUDBEAVER_SERVER_URL:?error}
    # https://docs.docker.com/reference/dockerfile/#healthcheck
    # https://docs.docker.com/reference/compose-file/services/#healthcheck
    healthcheck:
      interval: 10s
      retries: 3
      start_interval: 1s
      start_period: 5s
      test: ["CMD-SHELL", "curl -f -s http://127.0.0.1:8978"]
      timeout: 10s
    # https://dbeaver.com/docs/cloudbeaver/Run-Docker-Container/
    # https://hub.docker.com/r/dbeaver/cloudbeaver
    image: dbeaver/cloudbeaver:24.2.0
    # https://docs.docker.com/reference/compose-file/services/#networks
    networks:
      - postgres
    # https://docs.docker.com/reference/compose-file/services/#ports
    ports:
      - host_ip: ${CLOUDBEAVER_MAPPED_HOST_IP:?error}
        name: cloudbeaver
        published: ${CLOUDBEAVER_MAPPED_PORT:?error}
        target: 8978
    # https://docs.docker.com/reference/compose-file/services/#profiles
    profiles:
      - cloudbeaver
    # https://docs.docker.com/reference/compose-file/services/#restart
    restart: unless-stopped
    # https://docs.docker.com/reference/compose-file/services/#volumes
    volumes:
      - source: cloudbeaver_data
        target: /opt/cloudbeaver/workspace
        type: volume
  minio:
    # https://docs.docker.com/reference/compose-file/services/#ports
    ports:
      - host_ip: ${MINIO_API_MAPPED_HOST_IP:?error}
        name: minio_api
        published: ${MINIO_API_MAPPED_PORT:?error}
        target: 9000
      - host_ip: ${MINIO_CONSOLE_MAPPED_HOST_IP:?error}
        name: minio_console
        published: ${MINIO_CONSOLE_MAPPED_PORT:?error}
        target: 9001
  postgres:
    # https://docs.docker.com/reference/compose-file/services/#ports
    ports:
      - host_ip: ${POSTGRES_MAPPED_HOST_IP:?error}
        name: postgres
        published: ${POSTGRES_MAPPED_PORT:?error}
        target: 5432
  redis:
    # https://docs.docker.com/reference/compose-file/services/#ports
    ports:
      - host_ip: ${REDIS_MAPPED_HOST_IP:?error}
        name: redis
        published: ${REDIS_MAPPED_PORT:?error}
        target: 6379
  redis_insight:
    # https://docs.docker.com/reference/compose-file/services/#depends_on
    depends_on:
      redis:
        condition: service_healthy
        # Should be set to false when a third party redis service could be used in the api service and the redis compose profile is disabled.
        required: false
    # https://docs.docker.com/reference/dockerfile/#healthcheck
    # https://docs.docker.com/reference/compose-file/services/#healthcheck
    healthcheck:
      interval: 10s
      retries: 3
      start_interval: 1s
      start_period: 5s
      test: ["CMD-SHELL", "curl -f -s http://127.0.0.1:5540"]
      timeout: 10s
    # https://docs.docker.com/reference/compose-file/services/#image
    # https://hub.docker.com/r/redis/redisinsight
    image: redis/redisinsight:2.54.0
    # https://docs.docker.com/reference/compose-file/services/#networks
    networks:
      - redis
    # https://docs.docker.com/reference/compose-file/services/#ports
    ports:
      - host_ip: ${REDIS_INSIGHT_MAPPED_HOST_IP:?error}
        name: redis_insight
        published: ${REDIS_INSIGHT_MAPPED_PORT:?error}
        target: 5540
    # https://docs.docker.com/reference/compose-file/services/#profiles
    profiles:
      - redis_insight
    # https://docs.docker.com/reference/compose-file/services/#restart
    restart: unless-stopped
    # https://docs.docker.com/reference/compose-file/services/#volumes
    volumes:
      - source: redis_insight_data
        target: /data
        type: volume
# https://docs.docker.com/reference/compose-file/volumes/
volumes:
  cloudbeaver_data:
  redis_insight_data:
